"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var binding_1 = __importDefault(require("../binding"));
var OutputType_1 = __importDefault(require("../types/enums/OutputType"));
/**
 * Calls the given function name from the c++ library wrapper, validates
 * the struct values and passes the arguments sent in symbologyStruct
 * in the correct order.
 *
 * @param {SymbologyConfig} config - symbology config
 * @param {string} barcodeData - primary data to encode
 * @return {BinResult}
 */
function createBuffer(config, barcodeData) {
    var _a;
    return binding_1.default.createStream(barcodeData, config.symbology, config.height, config.whitespaceWidth, config.borderWidth, config.outputOptions, config.backgroundColor, config.foregroundColor, 
    // indicate to the library that we want BMP instead of PNG
    // this is to force zint to return a bitmap array buffer instead PNG binary
    (_a = config.fileName) === null || _a === void 0 ? void 0 : _a.replace(/\.png$/g, '.bmp'), config.scale, config.option1, config.option2, config.option3, config.showHumanReadableText ? 1 : 0, (config.text || barcodeData), config.encoding, config.eci, config.primary, config.rotation, config.dotSize);
}
/**
 * Renders a png, svg, or eps barcode.
 * If PNG, it returns the stream as a base64 string.
 *
 * @note The file will be created in memory and then passed to the returned object.
 *
 * @param {SymbologyConfig} config - symbology config
 * @param {string} barcodeData - primary data to encode
 * @param {OutputType} outputType
 * @returns {Promise<BinResult>} object with resulting props (see docs)
 */
function invoke(config, barcodeData, outputType) {
    var symbol = __assign({}, config);
    if (![OutputType_1.default.PNG, OutputType_1.default.EPS, OutputType_1.default.SVG].includes(outputType)) {
        return Promise.reject("Invalid output type: ".concat(outputType));
    }
    if (outputType !== OutputType_1.default.PNG) {
        symbol.fileName = "out.".concat(outputType);
        // apply option 8 (suppress stdout)
        if (symbol.outputOptions) {
            symbol.outputOptions += 8;
        }
        else {
            symbol.outputOptions = 8;
        }
    }
    var res = binary.createBuffer(symbol, barcodeData);
    if (res.code <= 2) {
        if (res.code === 0) {
            res.message = 'Symbology successfully created.';
        }
        return Promise.resolve(res);
    }
    return Promise.reject(res.message);
}
/**
 * Determines the OutputType of the given file name by its extension. Defaults to PNG.
 *
 * @param {string} fileName
 * @returns {OutputType}
 */
function getOutputType(fileName) {
    switch (fileName.toLowerCase().substr(-3)) {
        case 'svg':
            return OutputType_1.default.SVG;
        case 'eps':
            return OutputType_1.default.EPS;
        default:
            return OutputType_1.default.PNG;
    }
}
var binary = {
    createBuffer: createBuffer,
    invoke: invoke,
    getOutputType: getOutputType
};
exports.default = binary;
