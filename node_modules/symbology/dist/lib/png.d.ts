/// <reference types="node" />
import { PNG } from 'pngjs';
import RGBAColor from '../types/RGBAColor';
/**
 * Renders a PNG Blob stream to a base64 PNG.
 *
 * @param {PNG} png
 * @returns {Promise<string>} base64 representation
 */
declare function blobToBase64(png: PNG): Promise<string>;
/**
 * Writes the PNG instance to a buffer.
 *
 * @param {PNG} png - image instance
 * @returns {string}
 */
declare function getBuffer(png: PNG): Buffer;
/**
 * Converts the given hexadecimal number to RGBA.
 *
 * @param {string} hex - 6-digit or 8-digit RGB(A) representation in hex
 * @returns {RGBAColor} RGBA
 */
declare function getRgbaColor(hex?: string): RGBAColor;
/**
 * Renders RGB 24 bitmap into an image instance of PNG
 *
 * @param {number[]} bitmap - containing RGB values
 * @param {number} width - width of bitmap
 * @param {number} height  height of bitmap
 * @returns {PNG} instance of PNG
 */
declare function render(bitmap: number[], width: number, height: number, backgroundColor?: string, foregroundColor?: string): PNG;
declare const _default: {
    blobToBase64: typeof blobToBase64;
    getBuffer: typeof getBuffer;
    getRgbaColor: typeof getRgbaColor;
    render: typeof render;
};
export default _default;
