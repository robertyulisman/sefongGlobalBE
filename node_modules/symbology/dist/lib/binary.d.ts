import BinResult from '../types/BinResult';
import OutputType from '../types/enums/OutputType';
import SymbologyConfig from '../types/SymbologyConfig';
/**
 * Calls the given function name from the c++ library wrapper, validates
 * the struct values and passes the arguments sent in symbologyStruct
 * in the correct order.
 *
 * @param {SymbologyConfig} config - symbology config
 * @param {string} barcodeData - primary data to encode
 * @return {BinResult}
 */
declare function createBuffer(config: SymbologyConfig, barcodeData: string): BinResult;
/**
 * Renders a png, svg, or eps barcode.
 * If PNG, it returns the stream as a base64 string.
 *
 * @note The file will be created in memory and then passed to the returned object.
 *
 * @param {SymbologyConfig} config - symbology config
 * @param {string} barcodeData - primary data to encode
 * @param {OutputType} outputType
 * @returns {Promise<BinResult>} object with resulting props (see docs)
 */
declare function invoke(config: SymbologyConfig, barcodeData: string, outputType: OutputType): Promise<BinResult>;
/**
 * Determines the OutputType of the given file name by its extension. Defaults to PNG.
 *
 * @param {string} fileName
 * @returns {OutputType}
 */
declare function getOutputType(fileName: string): OutputType;
declare const binary: {
    createBuffer: typeof createBuffer;
    invoke: typeof invoke;
    getOutputType: typeof getOutputType;
};
export default binary;
