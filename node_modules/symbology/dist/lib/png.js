"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var pngjs_1 = require("pngjs");
/**
 * Renders a PNG Blob stream to a base64 PNG.
 *
 * @param {PNG} png
 * @returns {Promise<string>} base64 representation
 */
function blobToBase64(png) {
    var chunks = [];
    return new Promise(function (resolve) {
        png.pack();
        png.on('data', function (c) { return chunks.push(c); });
        png.on('end', function () {
            var result = Buffer.concat(chunks);
            resolve('data:image/png;base64,' + result.toString('base64'));
        });
    });
}
/**
 * Writes the PNG instance to a buffer.
 *
 * @param {PNG} png - image instance
 * @returns {string}
 */
function getBuffer(png) {
    return pngjs_1.PNG.sync.write(png);
}
/**
 * Converts the given hexadecimal number to RGBA.
 *
 * @param {string} hex - 6-digit or 8-digit RGB(A) representation in hex
 * @returns {RGBAColor} RGBA
 */
function getRgbaColor(hex) {
    var _a;
    if (hex === void 0) { hex = '000000FF'; }
    var colors = __spreadArray([], (_a = hex.match(/^([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i)) !== null && _a !== void 0 ? _a : [], true);
    var alpha = parseInt(colors[4], 16);
    if (colors.length >= 3) {
        return {
            red: parseInt(colors[1], 16),
            green: parseInt(colors[2], 16),
            blue: parseInt(colors[3], 16),
            alpha: !isNaN(alpha) ? alpha : 255
        };
    }
    // default to solid black if color is invalid
    return {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255
    };
}
/**
 * Returns true if two RGB colors are equal.
 *
 * @param {RGBAColor} a
 * @param {RGBAColor} b
 * @returns {boolean}
 */
function isEqualColor(a, b) {
    return a.red === b.red && a.green === b.green && a.blue === b.blue;
}
/**
 * Renders RGB 24 bitmap into an image instance of PNG
 *
 * @param {number[]} bitmap - containing RGB values
 * @param {number} width - width of bitmap
 * @param {number} height  height of bitmap
 * @returns {PNG} instance of PNG
 */
function render(bitmap, width, height, backgroundColor, foregroundColor) {
    var png = new pngjs_1.PNG({ width: width, height: height });
    var backgroundColorRgba = getRgbaColor(backgroundColor);
    var foregroundColorRgba = getRgbaColor(foregroundColor);
    var i = 0;
    for (var y = 0; y < height; y++) {
        for (var x = 0; x < width; x++) {
            var color = {
                red: bitmap[i],
                green: bitmap[i + 1],
                blue: bitmap[i + 2]
            };
            var rgba = isEqualColor(color, backgroundColorRgba)
                ? backgroundColorRgba
                : foregroundColorRgba;
            var pos = (png.width * y + x) << 2;
            png.data[pos] = rgba.red;
            png.data[pos + 1] = rgba.green;
            png.data[pos + 2] = rgba.blue;
            png.data[pos + 3] = rgba.alpha || 0;
            i += 3;
        }
    }
    return png;
}
exports.default = {
    blobToBase64: blobToBase64,
    getBuffer: getBuffer,
    getRgbaColor: getRgbaColor,
    render: render
};
